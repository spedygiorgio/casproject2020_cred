
library(actuar)
data(hachemeister)

X <- data.frame(hachemeister)
X <- rbind(X, X[5:1,], X[sample.int(5),], X[sample.int(5),])

set.seed(1)
X <- hachemeister[sample.int(5, replace=TRUE,size = 20), ]
X[, -1] <- rlnorm(prod(dim(X[,-1])), -.1^2/2, .1) * X[,-1]
X <- cbind.data.frame(X, "unit"=rep(rep(c("A", "B"), each=5), length=NROW(X)))
X <- cbind.data.frame(X, "group"=c(rep("a", each =10), rep("b", each =10)))
X$state <- rep(1:5, length=NROW(X))

fit <- cm(~group + group:unit + group:unit:state, X, ratio.1:ratio.12, weight.1:weight.12)
predict(fit)

fit$classification
fit$ordering

mypredict.newdata <- function(object, newdata, ...)
{
  if(is.null(newdata))
    return(predict(object, ...))
  stopifnot(is.data.frame(newdata))
  stopifnot(NROW(newdata) > 0)
  stopifnot(all(colnames(newdata) %in% colnames(object$classification)))
  stopifnot(NCOL(newdata) == NCOL(object$classification))
  
  
  
  newdata <- newdata[, colnames(object$classification)]
  m <- NCOL(newdata)
    
  search_id_in_classif <- function(i, nbcol, myclassif)
  {
    idx <- apply(sapply(1:nbcol, function(j) myclassif[,j] == newdata[i,j]), 1, all)
    if(sum(idx) == 0)
      return(NA)
    else 
      return(which(idx))
  }
  id.classif <- sapply(1:NROW(newdata), search_id_in_classif, 
                       nbcol = m, myclassif = object$classification)
  all.prem <- predict(object)
  newdata.prem <- all.prem[[m]][id.classif]
  cat(m, "-", sum(is.na(id.classif)), "\n")
  print(id.classif)
  print(newdata[is.na(id.classif),  ])
  
  if(sum(is.na(id.classif)) > 0)
    for(j in (m-1):1)
    {
      myclassif <- unique(object$classification[, 1:j])
      
      id.na <- which(is.na(id.classif))
      print(myclassif)
      print(id.classif)
      print(newdata[id.na,  ])
      id.classif <- sapply(id.na, search_id_in_classif,
                           nbcol = j, myclassif = myclassif)
      cat("j", j, "-", sum(is.na(id.classif)), "\n")
      
      newdata.prem[id.na] <- all.prem[[j]][id.classif]
      
      
      if(sum(is.na(id.classif)) == 0)
        break
    }

  return(newdata.prem)
}

d1 <- data.frame(state=4, group="a", unit="B")
d2 <- data.frame(unit=c("A", "A", "B", "B"), state=c(0:1, 2:1), group="b")
d3 <- data.frame(unit=c("A", "C", "C", "B"), state=c(0:1, 2:1), group="b")


cbind(fit$classification, predict(fit)$state)

cbind(d1, mypredict.newdata(fit, newdata = d1))

cbind(unique(fit$classification[,1:2]), predict(fit)$unit)

cbind(d2, mypredict.newdata(fit, newdata = d2))

mypredict.newdata(fit, newdata = d3)

  


